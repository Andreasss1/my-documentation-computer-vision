from flask import Flask, render_template, Response, jsonify
from flask_cors import CORS
import cv2
import numpy as np
from ultralytics import YOLO
import json
import threading
import time
from datetime import datetime

app = Flask(__name__)
CORS(app)

class YOLODetectionSystem:
    def __init__(self, model_path='oppo.pt'):
        self.model = YOLO(model_path)
        self.camera = None
        self.is_running = False
        self.current_frame = None
        self.detection_results = {
            'has_hp': False,
            'has_ng': False,
            'detections': [],
            'fps': 0,
            'stats': {'total': 0, 'pass': 0, 'ng': 0}
        }
        self.fps_counter = 0
        self.fps_start_time = time.time()
        self.detection_frame_coords = None
        
    def initialize_camera(self, camera_index=0):
        """Initialize camera"""
        try:
            self.camera = cv2.VideoCapture(camera_index)
            self.camera.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)
            self.camera.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)
            self.camera.set(cv2.CAP_PROP_FPS, 30)
            return True
        except Exception as e:
            print(f"Error initializing camera: {e}")
            return False
    
    def draw_detection_frame(self, frame):
        """Draw detection frame/box on the image"""
        h, w = frame.shape[:2]
        # Define detection area (center area of the frame)
        frame_width = int(w * 0.4)  # 40% of frame width
        frame_height = int(h * 0.4)  # 40% of frame height
        
        start_x = (w - frame_width) // 2
        start_y = (h - frame_height) // 2
        end_x = start_x + frame_width
        end_y = start_y + frame_height
        
        self.detection_frame_coords = {
            'x1': start_x, 'y1': start_y,
            'x2': end_x, 'y2': end_y
        }
        
        # Draw detection frame
        cv2.rectangle(frame, (start_x, start_y), (end_x, end_y), (255, 255, 0), 3)
        cv2.putText(frame, "DETECTION AREA", (start_x, start_y - 10), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 0), 2)
        
        return frame
    
    def is_object_in_detection_frame(self, bbox):
        """Check if detected object is within the detection frame"""
        if self.detection_frame_coords is None:
            return False
            
        x1, y1, x2, y2 = bbox
        frame_coords = self.detection_frame_coords
        
        # Check if bounding box overlaps with detection frame
        overlap_x = max(0, min(x2, frame_coords['x2']) - max(x1, frame_coords['x1']))
        overlap_y = max(0, min(y2, frame_coords['y2']) - max(y1, frame_coords['y1']))
        overlap_area = overlap_x * overlap_y
        
        bbox_area = (x2 - x1) * (y2 - y1)
        overlap_ratio = overlap_area / bbox_area if bbox_area > 0 else 0
        
        # Object is considered "in frame" if at least 50% of it overlaps
        return overlap_ratio > 0.5
    
    def process_detections(self, results, frame):
        """Process YOLO detection results"""
        has_hp_in_frame = False
        has_ng_in_frame = False
        detections = []
        
        if results and len(results) > 0 and results[0].boxes is not None:
            boxes = results[0].boxes
            
            for i, box in enumerate(boxes):
                # Get bounding box coordinates
                bbox = box.xyxy[0].cpu().numpy()
                confidence = float(box.conf[0].cpu().numpy())
                class_id = int(box.cls[0].cpu().numpy())
                
                # Get class name
                class_name = self.model.names[class_id] if class_id < len(self.model.names) else f"Class_{class_id}"
                
                # Check if object is in detection frame
                in_detection_frame = self.is_object_in_detection_frame(bbox)
                
                detection_info = {
                    'class': class_name,
                    'confidence': confidence,
                    'bbox': bbox.tolist(),
                    'in_frame': in_detection_frame
                }
                detections.append(detection_info)
                
                # Only count objects that are in the detection frame
                if in_detection_frame:
                    if class_name.lower() == 'hp':
                        has_hp_in_frame = True
                    elif class_name.lower() in ['ng', 'gompal', 'lecet', 'baret', 'defect']:
                        has_ng_in_frame = True
                        has_hp_in_frame = True  # Assume HP is present if defect is detected
                
                # Draw bounding box
                x1, y1, x2, y2 = bbox.astype(int)
                
                if in_detection_frame:
                    # Different colors for different detection states
                    if class_name.lower() in ['ng', 'gompal', 'lecet', 'baret', 'defect']:
                        color = (0, 0, 255)  # Red for NG
                        status = "NG"
                    elif class_name.lower() == 'hp':
                        color = (0, 255, 0)  # Green for HP
                        status = "PASS"
                    else:
                        color = (255, 0, 0)  # Blue for other objects
                        status = class_name.upper()
                else:
                    color = (128, 128, 128)  # Gray for objects outside frame
                    status = f"{class_name.upper()} (OUT)"
                
                # Draw bounding box
                cv2.rectangle(frame, (x1, y1), (x2, y2), color, 2)
                
                # Draw label with background
                label = f"{status} {confidence:.2f}"
                label_size = cv2.getTextSize(label, cv2.FONT_HERSHEY_SIMPLEX, 0.6, 2)[0]
                cv2.rectangle(frame, (x1, y1 - label_size[1] - 10), 
                            (x1 + label_size[0], y1), color, -1)
                cv2.putText(frame, label, (x1, y1 - 5), 
                           cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)
        
        return has_hp_in_frame, has_ng_in_frame, detections, frame
    
    def update_statistics(self, has_hp_in_frame, has_ng_in_frame):
        """Update production statistics"""
        if has_hp_in_frame:
            # Only count when HP enters the frame (avoid double counting)
            current_time = time.time()
            if not hasattr(self, 'last_detection_time'):
                self.last_detection_time = 0
            
            # Prevent double counting within 2 seconds
            if current_time - self.last_detection_time > 2.0:
                self.detection_results['stats']['total'] += 1
                
                if has_ng_in_frame:
                    self.detection_results['stats']['ng'] += 1
                else:
                    self.detection_results['stats']['pass'] += 1
                
                self.last_detection_time = current_time
    
    def calculate_fps(self):
        """Calculate FPS"""
        self.fps_counter += 1
        current_time = time.time()
        
        if current_time - self.fps_start_time >= 1.0:
            self.detection_results['fps'] = self.fps_counter
            self.fps_counter = 0
            self.fps_start_time = current_time
    
    def generate_frames(self):
        """Generate video frames with detections"""
        while self.is_running and self.camera is not None:
            ret, frame = self.camera.read()
            if not ret:
                break
            
            # Draw detection frame
            frame = self.draw_detection_frame(frame)
            
            # Run YOLO detection
            try:
                results = self.model(frame, conf=0.5)  # Confidence threshold 0.5
                has_hp, has_ng, detections, processed_frame = self.process_detections(results, frame)
                
                # Update detection results
                self.detection_results['has_hp'] = has_hp
                self.detection_results['has_ng'] = has_ng
                self.detection_results['detections'] = detections
                
                # Update statistics
                self.update_statistics(has_hp, has_ng)
                
                # Calculate FPS
                self.calculate_fps()
                
                # Add status text overlay
                status_text = f"FPS: {self.detection_results['fps']} | HP: {'Yes' if has_hp else 'No'} | NG: {'Yes' if has_ng else 'No'}"
                cv2.putText(processed_frame, status_text, (10, 30), 
                           cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
                cv2.putText(processed_frame, status_text, (10, 30), 
                           cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 0), 1)
                
                self.current_frame = processed_frame.copy()
                
            except Exception as e:
                print(f"Detection error: {e}")
                self.current_frame = frame.copy()
            
            # Convert frame to JPEG
            ret, buffer = cv2.imencode('.jpg', self.current_frame, 
                                     [cv2.IMWRITE_JPEG_QUALITY, 85])
            if ret:
                frame_bytes = buffer.tobytes()
                yield (b'--frame\r\n'
                       b'Content-Type: image/jpeg\r\n\r\n' + frame_bytes + b'\r\n')
            
            time.sleep(0.033)  # ~30 FPS
    
    def start_detection(self):
        """Start detection system"""
        if self.initialize_camera():
            self.is_running = True
            return True
        return False
    
    def stop_detection(self):
        """Stop detection system"""
        self.is_running = False
        if self.camera:
            self.camera.release()
            self.camera = None
    
    def restart_detection(self):
        """Restart detection system"""
        self.stop_detection()
        time.sleep(0.5)
        return self.start_detection()

# Initialize detection system
detector = YOLODetectionSystem()

@app.route('/')
def index():
    """Main page"""
    return '''
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Oppo Manufacturing - YOLOv8 Detection</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        .video-container {
            position: relative;
            width: 100%;
            height: 0;
            padding-bottom: 56.25%;
        }
        .video-element {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        .indicator-box {
            transition: all 0.3s ease;
        }
        .indicator-active {
            box-shadow: 0 0 15px currentColor;
        }
        @media (max-width: 768px) {
            .main-container {
                flex-direction: column;
            }
            .video-column, .control-column {
                width: 100% !important;
            }
        }
    </style>
</head>
<body class="bg-gray-100">
    <header class="bg-blue-900 text-white p-4 shadow-md">
        <div class="container mx-auto flex items-center">
            <div class="w-16 h-16 bg-white rounded-lg flex items-center justify-center mr-4">
                <i class="fas fa-industry text-blue-900 text-3xl"></i>
            </div>
            <div>
                <h1 class="text-2xl font-bold">Oppo Manufacturing Indonesia</h1>
                <p class="text-blue-200">YOLOv8 Object Detection System</p>
            </div>
        </div>
    </header>

    <main class="container mx-auto p-4">
        <div class="main-container flex flex-wrap gap-4">
            <div class="video-column flex-1 min-w-0 bg-white rounded-lg shadow-lg overflow-hidden">
                <div class="p-4 bg-blue-800 text-white font-semibold">
                    <i class="fas fa-video mr-2"></i> Real-Time Production Line Monitoring
                </div>
                <div class="video-container relative">
                    <img id="videoFeed" class="video-element" src="/video_feed" alt="Camera Feed">
                </div>
            </div>

            <div class="control-column w-full md:w-80 bg-white rounded-lg shadow-lg overflow-hidden">
                <div class="p-4 bg-blue-800 text-white font-semibold">
                    <i class="fas fa-cogs mr-2"></i> System Controls
                </div>
                
                <div class="p-4 space-y-4">
                    <div class="grid grid-cols-3 gap-2">
                        <button id="startBtn" class="bg-green-600 hover:bg-green-700 text-white py-3 px-2 rounded-lg flex flex-col items-center justify-center disabled:bg-gray-400 disabled:cursor-not-allowed">
                            <i class="fas fa-play mb-1"></i>
                            <span class="text-sm">Start</span>
                        </button>
                        <button id="stopBtn" class="bg-red-600 hover:bg-red-700 text-white py-3 px-2 rounded-lg flex flex-col items-center justify-center disabled:bg-gray-400 disabled:cursor-not-allowed" disabled>
                            <i class="fas fa-stop mb-1"></i>
                            <span class="text-sm">Stop</span>
                        </button>
                        <button id="restartBtn" class="bg-yellow-500 hover:bg-yellow-600 text-white py-3 px-2 rounded-lg flex flex-col items-center justify-center disabled:bg-gray-400 disabled:cursor-not-allowed" disabled>
                            <i class="fas fa-sync-alt mb-1"></i>
                            <span class="text-sm">Restart</span>
                        </button>
                    </div>

                    <div class="mt-6">
                        <h3 class="font-semibold text-gray-700 mb-2 flex items-center">
                            <i class="fas fa-chart-bar mr-2"></i> Detection Indicators
                        </h3>
                        <div class="space-y-3">
                            <div id="passIndicator" class="indicator-box border-2 border-green-500 p-3 rounded-lg text-center text-gray-700">
                                <i class="fas fa-check-circle text-green-500 text-2xl mb-1"></i>
                                <p class="font-semibold">PASS: Product Approved</p>
                                <p class="text-xs text-gray-500">No defects detected</p>
                            </div>
                            <div id="ngIndicator" class="indicator-box border-2 border-red-500 p-3 rounded-lg text-center text-gray-700">
                                <i class="fas fa-exclamation-triangle text-red-500 text-2xl mb-1"></i>
                                <p class="font-semibold">NG: Defect Detected</p>
                                <p class="text-xs text-gray-500">Quality issue found</p>
                            </div>
                        </div>
                    </div>

                    <div class="mt-6">
                        <h3 class="font-semibold text-gray-700 mb-2 flex items-center">
                            <i class="fas fa-clipboard-list mr-2"></i> Production Statistics
                        </h3>
                        <div class="bg-gray-50 p-3 rounded-lg">
                            <div class="flex justify-between mb-1">
                                <span class="text-sm font-medium">Today's Production:</span>
                                <span id="totalCount" class="text-sm font-bold">0</span>
                            </div>
                            <div class="flex justify-between mb-1">
                                <span class="text-sm font-medium">Passed:</span>
                                <span id="passCount" class="text-sm font-bold text-green-600">0</span>
                            </div>
                            <div class="flex justify-between">
                                <span class="text-sm font-medium">Defects:</span>
                                <span id="ngCount" class="text-sm font-bold text-red-600">0</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <footer class="bg-blue-900 text-white p-3 text-center text-sm">
        <div class="container mx-auto">
            <p>Powered by YOLOv8 and Flask | <span id="currentDateTime"></span></p>
        </div>
    </footer>

    <script>
        const startBtn = document.getElementById('startBtn');
        const stopBtn = document.getElementById('stopBtn');
        const restartBtn = document.getElementById('restartBtn');
        const passIndicator = document.getElementById('passIndicator');
        const ngIndicator = document.getElementById('ngIndicator');
        const totalCount = document.getElementById('totalCount');
        const passCount = document.getElementById('passCount');
        const ngCount = document.getElementById('ngCount');
        const currentDateTime = document.getElementById('currentDateTime');
        const videoFeed = document.getElementById('videoFeed');

        let isRunning = false;
        let statusInterval;

        function updateDateTime() {
            const now = new Date();
            currentDateTime.textContent = now.toLocaleString();
        }

        function updateStatus() {
            fetch('/status')
                .then(response => response.json())
                .then(data => {
                    // Update indicators
                    if (!data.has_hp) {
                        passIndicator.classList.remove('bg-green-100', 'indicator-active', 'text-green-700');
                        passIndicator.classList.add('text-gray-700');
                        ngIndicator.classList.remove('bg-red-100', 'indicator-active', 'text-red-700');
                        ngIndicator.classList.add('text-gray-700');
                    } else if (data.has_ng) {
                        passIndicator.classList.remove('bg-green-100', 'indicator-active', 'text-green-700');
                        passIndicator.classList.add('text-gray-700');
                        ngIndicator.classList.add('bg-red-100', 'indicator-active', 'text-red-700');
                        ngIndicator.classList.remove('text-gray-700');
                    } else {
                        passIndicator.classList.add('bg-green-100', 'indicator-active', 'text-green-700');
                        passIndicator.classList.remove('text-gray-700');
                        ngIndicator.classList.remove('bg-red-100', 'indicator-active', 'text-red-700');
                        ngIndicator.classList.add('text-gray-700');
                    }

                    // Update statistics
                    totalCount.textContent = data.stats.total;
                    passCount.textContent = data.stats.pass;
                    ngCount.textContent = data.stats.ng;
                })
                .catch(error => console.error('Error fetching status:', error));
        }

        startBtn.addEventListener('click', () => {
            fetch('/start', { method: 'POST' })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        isRunning = true;
                        startBtn.disabled = true;
                        stopBtn.disabled = false;
                        restartBtn.disabled = false;
                        videoFeed.src = '/video_feed?' + new Date().getTime();
                        statusInterval = setInterval(updateStatus, 500);
                    } else {
                        alert('Failed to start system: ' + data.message);
                    }
                });
        });

        stopBtn.addEventListener('click', () => {
            fetch('/stop', { method: 'POST' })
                .then(response => response.json())
                .then(data => {
                    isRunning = false;
                    startBtn.disabled = false;
                    stopBtn.disabled = true;
                    restartBtn.disabled = false;
                    videoFeed.src = '';
                    if (statusInterval) clearInterval(statusInterval);
                });
        });

        restartBtn.addEventListener('click', () => {
            fetch('/restart', { method: 'POST' })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        videoFeed.src = '/video_feed?' + new Date().getTime();
                        if (!statusInterval) {
                            statusInterval = setInterval(updateStatus, 500);
                        }
                    }
                });
        });

        // Initialize
        updateDateTime();
        setInterval(updateDateTime, 1000);
    </script>
</body>
</html>
    '''

@app.route('/video_feed')
def video_feed():
    """Video streaming route"""
    if detector.is_running:
        return Response(detector.generate_frames(),
                       mimetype='multipart/x-mixed-replace; boundary=frame')
    else:
        # Return a placeholder image when not running
        return Response("", mimetype='multipart/x-mixed-replace; boundary=frame')

@app.route('/start', methods=['POST'])
def start_detection():
    """Start detection system"""
    try:
        if detector.start_detection():
            return jsonify({'success': True, 'message': 'Detection started'})
        else:
            return jsonify({'success': False, 'message': 'Failed to initialize camera'})
    except Exception as e:
        return jsonify({'success': False, 'message': str(e)})

@app.route('/stop', methods=['POST'])
def stop_detection():
    """Stop detection system"""
    detector.stop_detection()
    return jsonify({'success': True, 'message': 'Detection stopped'})

@app.route('/restart', methods=['POST'])
def restart_detection():
    """Restart detection system"""
    if detector.restart_detection():
        return jsonify({'success': True, 'message': 'Detection restarted'})
    else:
        return jsonify({'success': False, 'message': 'Failed to restart detection'})

@app.route('/status')
def get_status():
    """Get current detection status"""
    return jsonify(detector.detection_results)

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000, threaded=True)
